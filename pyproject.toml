[tool.poetry]
name = "git-ws"
version = "1.3.1"
description = "Git Workspace - Multi Repository Management Tool"
readme = "README.md"
license = "LGPL-3.0-or-later"
authors = [
    "c0fec0de <c0fec0de@gmail.com>",
    "Martin HÃ¶her <martin@rpdev.net>",
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
]

packages = [
    { include = "gitws" },
]

[project.urls]
"Homepage" = "https://github.com/c0fec0de/git-ws"
"Documentation" = "https://git-ws.readthedocs.io/en/latest/"
"Bug Tracker" = "https://github.com/c0fec0de/git-ws/issues"

[tool.poetry.scripts]
git-ws = 'gitws._cli:main'

[tool.poetry.dependencies]
python = '^3.7.2'
anytree = "*"
appdirs = "^1.4.4"
click = '>=6.7.0,<9.0.0'
pydantic = '^1.10.0'
tomlkit = '>=0.11.5,<1.0.0'

[tool.poetry.group.test.dependencies]
black = '^22.3.0'
coverage = '^6.4.4'
isort = '^5.9'
mypy = "~1.0.0"
pylint = '^2.15'
pytest = '^6.2'
tabulate = '>=0.8.10,<1.0.0'
types-appdirs = "^1.4.3"

[tool.poetry.group.doc.dependencies]
sphinx = '^5.1.1'
sphinx-rtd-theme = "^1.0.0"
sphinxemoji = ">=0.2.0"

[build-system]
requires = ["setuptools", "poetry_core>=1.0"]
build-backend = "poetry.core.masonry.api"


[tool.black]
line-length = 120
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.mypy_cache
  | \.venv
  | \.tox
  | build
  | dist
  | setup\.py
)/
'''

[tool.isort]
profile = "black"
line_length = 120

[tool.coverage.report]
exclude_lines = [
    'return NotImplemented',
    'raise NotImplementedError()',
    'pragma: no cover'
]


[tool.pylint.'MESSAGES CONTROL']
max-line-length = 120
extension-pkg-whitelist = "pydantic"
disable = [
    'duplicate-code',
    'redefined-outer-name',
    'too-many-arguments',
]

[tool.mypy]
ignore_missing_imports = true

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py,py-min
isolated_build = True

[tox:.package]
basepython = python3

[testenv:py]
allowlist_externals = *
setenv =
    LANGUAGE=en_US

commands =
    poetry install --with=test --with=doc
    poetry run black .
    poetry run isort .
    poetry run coverage run --source=gitws --branch -m pytest --doctest-glob=docs/*.rst --doctest-modules --ignore-glob=tests/testdata* --ignore=docs/conf.py --log-level=DEBUG -vvx --junitxml=report.xml
    poetry run coverage report
    poetry run coverage html
    poetry run coverage xml
    poetry run pylint gitws tests
    poetry run mypy gitws
    poetry run make html -C docs

[testenv:py-min]
allowlist_externals = *
commands =
    poetry install --without=test --without=doc
    poetry run python -c 'import gitws'
    poetry run git-ws --version
    poetry run python -m gitws --version
"""
