[project]
name = "git-ws"
version = "2.0.2"
description = "Git Workspace - Multi Repository Management Tool"
authors = [
    {name = "c0fec0de", email = "c0fec0de@gmail.com"},
    {name = "Martin HÃ¶her", email = "martin@rpdev.net"},
]
dependencies = [
    "anytree<3.0.0,>=2.8.0",
    "appdirs<2.0.0,>=1.4.4",
    "click<9.0.0,>=6.7.0",
    "flufl-lock<9.0,>=6.0",
    "importlib-metadata<7.0.0,>=6.8.0; python_version < \"3.10\"",
    "pydantic<3.0.0,>=2.2.0",
    "pydantic-settings<3.0.0,>=2.0.3",
    "tomlkit<1.0.0,>=0.11.5",
    ]
requires-python = ">=3.8.2,<4.0"
readme = "README.md"
license = {text = "LGPL-3.0-or-later"}
classifiers = [
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
    'Programming Language :: Python :: 3 :: Only',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
]

[project.urls]
"Homepage" = "https://github.com/c0fec0de/git-ws"
"Documentation" = "https://git-ws.readthedocs.io/en/stable/"
"Bug Tracker" = "https://github.com/c0fec0de/git-ws/issues"

[project.entry-points."gitws.manifestformat"]
GitWSManifestFormat = "gitws.gitwsmanifestformat:GitWSManifestFormat"

[project.scripts]
git-ws = "gitws._cli:main"

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.pdm]
[tool.pdm.dev-dependencies]
test = [
    "coveralls<4.0.0,>=3.3.1",
    "mypy~=1.0.0",
    "pytest-cov<5.0.0,>=4.1.0",
    "pytest-xdist<4.0.0,>=3.5.0",
    "pytest<8.0,>=7.0",
    "types-appdirs<2.0.0,>=1.4.3",
]

[tool.pdm.build]
includes = ["gitws"]

[tool.ruff]
line-length = 120
fix = true
target-version = "py38"
select = [
    # isort
    "I",
    # pyflakes
    "F",
    # pycodestyle
    "E", "W",
    # pydocstyle
    "D",
    # flake8-2020
    "YTT",
    # flake8-bugbear
    "B",
    # flake8-quotes
    "Q",
    # flake8-debugger
    "T10",
    # flake8-gettext
    "INT",
    # pylint
    "PL",
    # misc lints
    "PIE",
    # flake8-pyi
    "PYI",
    # tidy imports
    "TID",
    # implicit string concatenation
    "ISC",
    # type-checking imports
    "TCH",
    # comprehensions
    "C",
    # pygrep-hooks
    "PGH",
    # Ruff-specific rules
    "RUF",
    # flake8-bandit: exec-builtin
    "S102",
    # numpy-legacy-random
    "NPY002",
    # Perflint
    "PERF",
    # flynt
    "FLY",
    # flake8-logging-format
    "G",
    # pyupgrade
    "UP",
]
ignore = [
    # too-many-arguments
    'PLR0913',
    # Ambiguous
    'ISC001',
    # support type: ignore
    'PGH003',
    # poetry deviates
    'RUF200',
    # Ambiguous doc
    'D203', 'D212', 'D402', 'D406',
    # Multiline doc is ok.
    'D200',
    # We use the class for constructor doc
    'D107',
    # We keep legacy on Optional[] and Union[]
    'UP007',
    # Magic method documentation is optional
    'D105',
    # Section underline
    'D407',
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"gitws/_cli/**.py" = ["PLR0913"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
addopts = """
    --cov gitws
    --cov-report term
    --cov-report html
    --doctest-glob=docs/*.rst
    --doctest-modules
    --ignore-glob=tests/testdata*
    --ignore=docs/conf.py
    --log-level=DEBUG
    --junitxml=report.xml
"""
filterwarnings = [
    "error",
]

[tool.coverage.report]
exclude_lines = [
    'return NotImplemented',
    'raise NotImplementedError()',
    'pragma: no cover',
    'assert False',
]

[tool.mypy]
ignore_missing_imports = true
